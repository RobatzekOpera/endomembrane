//*************************************************************************
//  File Name:			leafless_endomembrane_detection.script
//  Purpose: Detects spot-like features on leaf images
//					
// 							EVOTEC  TECHNOLOGIES 
//  						Olavi Ollikainen
//  e-mail: 			Olavi.Ollikainen@evotec-technologies.com
//	phone :			00 372 52 75 262
//  With corrections from Kurt Stu"ber MPI Ko"ln
//  phone:          +49 (0) 221 5062 120
//  e-mail           stueber@mpiz-koeln.mpg.de
//  With further modifications from Sebastian Schaaf MPIZ Ko"ln
//  phone			+49 (0) 221 5062 323
//	e-mail			schaaf@mpiz-koeln.mpg.de
// Further modified by Matthew Beckers
//							-This version simply detects spot-like features and ignores leaf cells
// e-mail			Matthew.Beckers@tsl.ac.uk
//*************************************************************************
//
// 				Output parameters:
//													* Valid Spots in Stack
//													* Average Number of Spots per recognized Area in Stack
//
//													* Number of Spots in whole Well
//
//													* Average Intensity of Spots
//													* Average Area of Spots
//													* Average Length of Spots
//													* Average Half Width of Spots
//													* Average Width to Length Ratio of Spots
//													* Average Width to Length Ratio of Spots - Standard Deviation
//													* Average Roundness of Spots
//													* Average Roundness of Spots - Standard Deviation
//													* Average Contrast of Spots
//													* Average Contrast of Spots - Standard Deviation
//													* Average Peak Intensity of Spots
//
//													* Total number of Stacks analyzed in Well
//
//*******************************************************************************************************************************

// INPUT PARAMETERS
input(StackNo, 0, "Stack No", "i", "Number of the stacks to analyze. If set to 0 all stacks are evaluated.")
input(ShowIllustrations, YES, "Show Illustrations", "y", "YES- Output illustrations are depicted. No- Output illustrations are not shown.")
input(WriteImages, YES, "Write Images", "y", "Write Images of the projected image and the detected spots to file")
input(debugImages,NO, "Debug Using Images", "y", "YES- all intermediary images are shown.")

// READS IN IMAGES
Singlewell(compact=yes)

//Image projection created by the OperaTemplates procedures
set(imagefilename1 = SourceData.sourcefilename[0])
OperaTemplates::ControlImages(StackNo, sourcedata)
OperaTemplates::AssignPlane()

set(InvalidStacks = 0)  //counts black/grey stacks without information
set(BadStacks = 0)   //counts stacks with Signal but no recognized cells
set(all_VarsOK = 0)

// LOOP OVER IMAGE FIELDS
Foreach(StartField .. EndField, "_FieldCounter") 
	// Assigns image names for the current field, IM_CH1 - first channel image, IM_CH2 - second channel image etc
	RobatzekProcs::Assign_FirstLastZplane(sourcedata, _FieldCounter, NumberOfImages, NumberOfChannels)
	
	// User script STARTS
	set( imagefilename1 = SourceData.sourcefilename[0])
	OperaTemplates::AssignStacks()
	OperaTemplates::MaxProjections()
		
	set(IM_Max = IM_Max_CH1)

	// Detects the initial set of spots
	//spot_detection_c_inner(IM_Max, SpotMinimumDistance=2, SpotPeakRadius=1, SpotReferenceRadius=10, SpotMinimumContrast=0.1, SpotminimumToCellIntensity=0.8)
	RobatzekProcs::Spot_Detection_MPIZ(IM_Max, "", debugImages, SpotMinimumDistance=2, SpotPeakRadius=1, SpotReferenceRadius=3, SpotMinimumContrast=0.3, SpotminimumToCellIntensity=1)
	
	delete(spotcandidates,wholecells)
		
	// Detects the actual spot locations and attributes like area, contrast, width, length etc and classifies the spots and filters the spots.
	RobatzekProcs::SpotAttributeCalculation(IM_Max, spots)

	// User script ENDS
		
	// Output sequence starts
	push(EntireNumberOfSpotsInStackVector, Spots.count)
	push(SpotsVector, Spots)
	push(imageVector, IM_Max)
	push(StacksUsed, _FieldCounter )
	delete(wholecells)

	if(all_VarsOK == 0)
		set(all_Spots=Spots)
		set(all_VarsOK = all_VarsOK + 1)
	else()
		AddObjects(Spots, objects=all_Spots, CheckOverlap=no | all_Spots=objects) 
	end()
end() // end of the foreach loop over stacks

// REPORTS SPOT DETECTION  OUTPUT PARAMETERS  
if (InvalidStacks<=EndField-StartField) 
	// At least one field was analysed and we have an object list
	set(OP_NumberOfSpots = all_Spots.count)
	set(OP_SpotAverageIntensity=all_Spots.intensity.mean)
	set(OP_SpotAverageArea=all_Spots.area.mean)
	set(OP_SpotTotalSignal=all_Spots.IntegratedSpotSignal.sum)
	set(OP_SpotTotalSignal_backgroundsubtracted=all_Spots.IntegratedSpotSignal_backgroundsubtracted.sum)
	set(OP_SpotAverageLength=all_Spots.FullLength.mean)
	set(OP_SpotAverageHalfWidth=all_Spots.HalfWidth.mean)
	set(OP_SpotAverageWidth2LengthRatio=all_Spots.Width2LengthRatio.mean)
	set(OP_SpotAverageWidth2LengthRatioStddev=all_Spots.Width2LengthRatio.stddev)
	set(OP_SpotAverageRoundness=all_Spots.RoundnessCorrected.mean)
	set(OP_SpotAverageRoundnessStddev=all_Spots.RoundnessCorrected.stddev)
	set(OP_SpotAverageContrast=all_Spots.Contrast.mean)
	set(OP_SpotAverageContrastStddev=all_Spots.Contrast.stddev)
	set(OP_SpotAveragePeakIntensity=all_Spots.PeakIntensity.mean)
	
else()
	// NO valid stacks
	set(OP_NumberOfSpots = NAN)
	set(OP_NumberOfLeafCells = NAN)
	set(OP_NumberOfStomata=NAN)
	set(OP_NumberOfGaps=NAN)
	set(OP_NumberOfSpotsPerCell=NAN)
	set(OP_SpotAverageIntensity= NAN)
	set(OP_SpotAverageArea= NAN)
	set(OP_SpotTotalSignal= NAN)
	set(OP_SpotTotalSignal_backgroundsubtracted= NAN)
	set(OP_SpotAverageLength= NAN)
	set(OP_SpotAverageHalfWidth= NAN)
	set(OP_SpotAverageWidth2LengthRatio= NAN)
	set(OP_SpotAverageWidth2LengthRatioStddev= NAN)
	set(OP_SpotAverageRoundness= NAN)
	set(OP_SpotAverageRoundnessStddev= NAN)
	set(OP_SpotAverageContrast= NAN)
	set(OP_SpotAverageContrastStddev= NAN)
	set(OP_SpotAveragePeakIntensity= NAN)
	set(OP_TotalCellArea= NAN)
	set(OP_NumberOfSpotsPerArea= NAN)
	set(OP_SpotTotalSignalPerArea= NAN)
	set(OP_SpotTotalSignalPerArea_backgroundsubtracted= NAN)
end()

// REPORTS ADDITIONAL OUTPUTS  
set(OP_StackCount = NumberOfFields) // Total number of image fields
set(OP_ValidStacks = NumberOfFields - InvalidStacks) // Number of Valid Image fields is determined

set( vectorPos = 0 )
ForEach(1..NumberOfFields)
	output( EntireNumberOfSpotsInStackVector[ vectorPos ], "Number of Spots in Stack # " & StacksUsed[ vectorPos ] )
	set(vectorPos = vectorPos + 1 )
end()

output(OP_NumberOfSpots, "Number of Spots in whole Well")
output(OP_SpotAverageIntensity, "Average Intensity of Spots")
output(OP_SpotAverageArea, "Average Area of Spots")
output(OP_SpotAverageLength, "Average Length of Spots")
output(OP_SpotAverageHalfWidth, "Average Half Width of Spots")
output(OP_SpotAverageWidth2LengthRatio, "Average Width to Length Ratio of Spots")
output(OP_SpotAverageWidth2LengthRatioStddev, "Average Width to Length Ratio of Spots - Standard Deviation")
output(OP_SpotAverageRoundness, "Average Roundness of Spots")
output(OP_SpotAverageRoundnessStddev, "Average Roundness of Spots - Standard Deviation")
output(OP_SpotAverageContrast, "Average Contrast of Spots")
output(OP_SpotAverageContrastStddev, "Average Contrast of Spots - Standard Deviation")
output(OP_SpotAveragePeakIntensity, "Average Peak Intensity of Spots")
output(OP_StackCount, "Total number of Stacks analyzed in Well")

//Final Images.
set(i = 0)
set(_FieldCounter = 0)
foreach(StartField .. EndField, _FieldCounter)
	if(showIllustrations)
		imageview(imageVector[i], "Signal - Stack "& _FieldCounter,image=IM_Max, gamma=2.0)
		if(SpotsVector[i].count>0)
			imageview(SpotsVector[i].border, "Spots - Stack " & _FieldCounter, image=imageVector[i], title="Detected Spots in Stack # " & _FieldCounter, gamma=2.0)
		else()
			set(InvalidStacks=InvalidStacks+1)
		end() //end if Spots > 0
	end()
	if(WriteImages)
		set( namelength = length( imagefilename1 ) )
		set( corename = substr( imagefilename1, 1, namelength - 5 ) )
		gamma(2.0, image=imageVector[i] | writeImage = image)
		writeimage( imagefile=corename & "_" & FirstZplane & "-" & LastZplane & ".png", image=writeImage, imageformat="png",  )
		if(SpotsVector[i].count>0)
			paint(SpotsVector[i].border, image = writeImage | spotsImage = image)
			writeimage( imagefile=corename & "_spots_" & FirstZplane & "-" & LastZplane & ".png", image=spotsImage, imageformat="png",  )
		end()
	end()
	set(i = i + 1)
end()
